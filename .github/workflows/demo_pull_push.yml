name: "Deploy images of SciCat backend and MongoDB to AWS in ECR"
run-name: (${{ github.event.inputs.environment }}) Deploy SciCat Backend to AWS by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to deploy to"
        required: true
        default: 'integration'
        type: choice
        options:
          - integration
          - staging
          - production
env:
  AWS_REGION: ${{ vars.AWS_REGION || 'eu-west-1' }}
  SCICAT_IMAGE: ghcr.io/scicatproject/backend-next:${{ vars.SCICAT_IMAGE_TAG || 'latest' }}
  MONGODB_IMAGE: mongo:${{ vars.MONGODB_IMAGE_TAG || '6.0.21' }}

permissions:
  contents: read
  id-token: write

jobs:
  prepare-scicat-image:
    name: Prepare SciCat Docker Image
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create config files
        run: |
          # Set environment directory based on input
          if [ "${{ github.event.inputs.environment }}" = "integration" ]; then
            ENV_DIR="integration"
          elif [ "${{ github.event.inputs.environment }}" = "staging" ]; then
            ENV_DIR="staging"
          elif [ "${{ github.event.inputs.environment }}" = "production" ]; then
            ENV_DIR="production"
          else
            ENV_DIR="integration"
          fi
    
          echo "Using config from directory: config/${ENV_DIR}"
         
          mkdir -p config
          if [ -f "config/${ENV_DIR}/functionalAccounts.json" ]; then
            cp "config/${ENV_DIR}/functionalAccounts.json" config/functionalAccounts.json
          else
            echo "Functional accounts file not found, exiting now!" && exit 1
          fi
          
          if [ -f "config/${ENV_DIR}/proposalTypes.json" ]; then
            cp "config/${ENV_DIR}/proposalTypes.json" config/proposalTypes.json
          else
            echo "Proposal types file not found, exiting now!" && exit 1
          fi
          
          if [ -f "config/${ENV_DIR}/.env" ]; then
            cp "config/${ENV_DIR}/.env" config/environment_variables
          else
            echo "Environment variables file not found, exiting now!" && exit 1
          fi
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        # Display the login status if the login was successful
        if: always()

      - name: Pull SciCat Docker Image
        run: |
          docker create --name scicat_temp ${{ env.SCICAT_IMAGE }}
          docker cp config/functionalAccounts.json scicat_temp:/home/node/app/functionalAccounts.json
          docker cp config/proposalTypes.json scicat_temp:/home/node/app/proposalTypes.json
          docker cp config/environment_variables scicat_temp:/home/node/app/.env
          docker commit scicat_temp scicat_configured
        if: always()

      - id: credentials-image-push
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.ROLE_ARN_IMAGE_PUSH }}
          role-session-name: ${{ github.actor_id }}-${{ github.run_id }}
          mask-aws-account-id: false # masking would affect unrelated steps if configured
        if: always()

      - id: login-ecr-push
        name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        if: always()

      - name: Tag and push SciCat Docker Image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-push.outputs.registry }}
          ECR_REPOSITORY: scicat-backend
        run: |
          # Tag with SHA for immutability
          IMAGE_TAG=${{ github.event.inputs.environment }}-$(echo ${{ github.sha }})
          echo "Tagging image with: ${IMAGE_TAG}"
          
          # Verify registry is properly set
          if [ -z "$ECR_REGISTRY" ]; then
            echo "ERROR: ECR_REGISTRY is empty, cannot proceed"
            exit 1
          fi
          
          FULL_IMAGE_URL=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "Pushing image: ${FULL_IMAGE_URL}"

          # Check if repository exists without showing error output
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" 2>/dev/null || \
          (echo "[ERROR] Repository doesn't exist, exiting now!" && exit 1)
          
          docker tag scicat_configured ${FULL_IMAGE_URL}
          docker push ${FULL_IMAGE_URL}
          echo "Pushed image: ${FULL_IMAGE_URL}"
          echo "image_url=${FULL_IMAGE_URL}" >> $GITHUB_OUTPUT
        if: always()
    outputs:
      image_url: ${{ steps.push-image.outputs.image_url }}

  deploy-mongodb:
    name: Deploy MongoDB Container
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    needs: prepare-scicat-image
    steps:
      - id: credentials-mongodb-deploy
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ vars.ROLE_ARN_IMAGE_PUSH }}
          role-session-name: ${{ github.actor_id }}-${{ github.run_id }}-mongodb
          mask-aws-account-id: false

      - id: login-ecr-mongodb
        name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull and Push MongoDB Image
        id: push-mongodb-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-mongodb.outputs.registry }}
          # Deploy in its own repository
          ECR_REPOSITORY: scicat-mongodb
        run: |
          # Pull official MongoDB image
          docker pull ${{ env.MONGODB_IMAGE }}

          # Tag with environment and SHA
          IMAGE_TAG=${{ github.sha }}
          FULL_IMAGE_URL=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          # Check if repository exists
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" 2>/dev/null || \
          (echo "[ERROR] Repository doesn't exist, exiting now!" && exit 1)

          # Tag and push
          docker tag ${{ env.MONGODB_IMAGE }} ${FULL_IMAGE_URL}
          docker push ${FULL_IMAGE_URL}
          echo "Pushed MongoDB image: ${FULL_IMAGE_URL}"
          echo "mongodb_image_url=${FULL_IMAGE_URL}" >> $GITHUB_OUTPUT
    outputs:
      mongodb_image_url: ${{ steps.push-mongodb-image.outputs.mongodb_image_url }}
