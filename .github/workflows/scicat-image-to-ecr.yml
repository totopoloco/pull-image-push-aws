name: Deploy SciCat Image in ECR

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "The environment to deploy to"
      aws_region:
        required: true
        type: string
        description: "AWS Region to use"
      scicat_image:
        required: true
        type: string
        description: "SciCat image to use"
      role_arn_image_push:
        required: true
        type: string
        description: "Role ARN for image push"
    outputs:
      scicat_image_url:
        description: "The URL of the pushed image"
        value: ${{ jobs.prepare-scicat.outputs.scicat_image_url }}

jobs:
  prepare-scicat:
    name: Prepare SciCat Docker Image and store it in ECR
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    outputs:
      scicat_image_url: ${{ steps.push-image.outputs.scicat_image_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create config files
        run: |
          # Set environment directory based on input
          if [ "${{ inputs.environment }}" = "integration" ]; then
            ENV_DIR="integration"
          elif [ "${{ inputs.environment }}" = "staging" ]; then
            ENV_DIR="staging"
          elif [ "${{ inputs.environment }}" = "production" ]; then
            ENV_DIR="production"
          else
            ENV_DIR="integration"
          fi

          echo "Using config from directory: config/${ENV_DIR}"

          mkdir -p config
          if [ -f "config/${ENV_DIR}/functionalAccounts.json" ]; then
            cp "config/${ENV_DIR}/functionalAccounts.json" config/functionalAccounts.json
          else
            echo "Functional accounts file not found, exiting now!" && exit 1
          fi

          if [ -f "config/${ENV_DIR}/proposalTypes.json" ]; then
            cp "config/${ENV_DIR}/proposalTypes.json" config/proposalTypes.json
          else
            echo "Proposal types file not found, exiting now!" && exit 1
          fi

          if [ -f "config/${ENV_DIR}/.env" ]; then
            cp "config/${ENV_DIR}/.env" config/environment_variables
          else
            echo "Environment variables file not found, exiting now!" && exit 1
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: always()

      - name: Pull SciCat Docker Image
        run: |
          docker create --name scicat_temp ${{ inputs.scicat_image }}
          docker cp config/functionalAccounts.json scicat_temp:/home/node/app/functionalAccounts.json
          docker cp config/proposalTypes.json scicat_temp:/home/node/app/proposalTypes.json
          docker cp config/environment_variables scicat_temp:/home/node/app/.env
          docker commit scicat_temp scicat_configured
        if: always()

      - id: credentials-image-push
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.role_arn_image_push }}
          role-session-name: ${{ github.actor_id }}-${{ github.run_id }}
          mask-aws-account-id: false
        if: always()

      - id: login-ecr-push
        name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        if: always()

      - name: Tag and push SciCat Docker Image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-push.outputs.registry }}
          ECR_REPOSITORY: scicat-backend
        run: |
          # Tag with SHA for immutability
          IMAGE_TAG=${{ inputs.environment }}-$(echo ${{ github.sha }})
          echo "Tagging image with: ${IMAGE_TAG}"

          # Verify registry is properly set
          if [ -z "$ECR_REGISTRY" ]; then
            echo "ERROR: ECR_REGISTRY is empty, cannot proceed"
            exit 1
          fi

          FULL_IMAGE_URL=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "Pushing image: ${FULL_IMAGE_URL}"

          # Check if repository exists without showing error output
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" 2>/dev/null || \
          (echo "[ERROR] Repository doesn't exist, exiting now!" && exit 1)

          docker tag scicat_configured ${FULL_IMAGE_URL}
          docker push ${FULL_IMAGE_URL}
          echo "Pushed image: ${FULL_IMAGE_URL}"
          echo "scicat_image_url=${FULL_IMAGE_URL}" >> $GITHUB_OUTPUT
        if: always()